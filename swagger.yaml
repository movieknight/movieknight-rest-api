swagger: '2.0'
info:
  title: MovieKnight API
  description: Simple user+auth for MovieKnight hackathon
  version: "1.0.0"

schemes:
  - http
  - https

basePath: /api
produces:
  - application/json
paths:
  /user:
    get:
      summary: Retrieve user data
      parameters:
        - name: X-Access-Token
          in: header
          description: Valid Access Token from which user can be found at
          required: true
          type: string
          #$ref: '#/definitions/AccessToken'
      responses:
        200:
          description: User associated with that access token
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: Created user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Update user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Updated user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete user
      parameters:
        - name: X-Access-Token
          in: header
          description: Valid Access Token from which user can be found at
          required: true
          type: string
      responses:
        204:
          description: User associated with that access token
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /auth:
    post:
      summary: Login user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: Created user
          schema:
            $ref: '#/definitions/Token'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Logout user
      parameters:
        - name: X-Access-Token
          in: header
          description: Valid Access Token from which user can be found at
          required: true
          type: string
      responses:
        204:
          description: User associated with that access token
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /event:
    post:
      summary: "Add a new event"
      description: ""
      operationId: "addEvent"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Event object to hold event details"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        405:
          description: "Invalid input"
      security:
  /event/{eventId}:
    get:
      summary: "Find event by ID"
      description: "Returns a single event"
      operationId: "getEventById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of event to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Event not found"
      security:
      - api_key: []
  /genre:
    post:
      summary: "Add a new genre"
      description: ""
      operationId: "addGenre"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "genre object to hold genre details"
        required: true
        schema:
          $ref: "#/definitions/Genre"
      responses:
        405:
          description: "Invalid input"
      security:
  /genre/{genreName}:
    get:
      summary: "Find genre by name"
      description: "Returns a single genre"
      operationId: "getGenreByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "genreName"
        in: "path"
        description: "name of genre to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Genre"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Genre not found"
      security:
      - api_key: []
  /movie:
    post:
      summary: "Add a new movie"
      description: ""
      operationId: "addMovie"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "movie object to hold movie details"
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        405:
          description: "Invalid input"
      security:
  /movie/{imbd_id}:
    get:
      summary: "Find movie by imbd_id"
      description: "Returns a single movie"
      operationId: "getMovieById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "imbd_id"
        in: "path"
        description: "name of movie to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: "Invalid ID supplied"
        404:
          description: "movie not found"
      security:
      - api_key: []
  /recommendation:
    post:
      summary: "Add a new recommendation"
      description: ""
      operationId: "addRecommendation"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "recommendation object to hold recommendation details"
        required: true
        schema:
          $ref: "#/definitions/Recommendation"
      responses:
        405:
          description: "Invalid input"
      security:
  /recommendation/{imbd_id}:
    get:
      tags:
      - "recommendation"
      summary: "Find recommendation by imbd_id"
      description: "Returns a single recommendation"
      operationId: "getRecommendationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "imbd_id"
        in: "path"
        description: "name of recommendation to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Recommendation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "recommendation not found"
      security:
      - api_key: []
definitions:
  Event:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      description:
        type: string
      public:
        type: boolean
        default: false
      owner: 
        type: string
      user_limit:
        type: integer
        format: int32
  User:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      title:
        type: string
    required:
      - email
      - password
  Genre:
    type: object
    properties:
      name:
        type: string
  Movie:
    type: object
    properties:
      imbd_id:
        type: string
  Recommendation:
    type: object
    properties:
      imbd_ids:
        type: array
        items:
          type: string
      event_id:
        type: string
  Token:
    type: object
    properties:
       access_token:
         type: string
    required:
      - access_token
  Error:
    type: object
    properties:
      error:
        type: string
      error_message:
        type: string